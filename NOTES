# -*- mode:org -*-

* ability to call back-end functions through the board
e.g., it would be nice to be able to call gnugo commands and display
the output.  This should be extensible however...

* support for calculating scores
This could be built right into the board but would require
- ability to assign contiguous open spaces
- ability to mark stones as captured

* track and display captured stones on board
* DONE better looking board
See [[info:elisp#Image%20Descriptors][info:elisp#Image Descriptors]], can just use the text svg data
directly, no need for files.  Also look at [[info:elisp#Pointer%20Shape][info:elisp#Pointer Shape]]
for controlling the shape of the map.

: '(image :type 'svg :data )

** For images look at these images (go with wikipedia svg images).
- http://en.wikipedia.org/wiki/File:Go_b.svg
- http://en.wikipedia.org/wiki/File:Go_w.svg
- or at ruby go http://rubygo.rubyforge.org/
- see the go image source at
  http://en.wikipedia.org/wiki/Blood-vomiting_game

* DONE igs probably needs to periodically ping the server
* DONE make a board back-end so it can receive commands
* DONE allow an IGS process to send commands to a board
* IGS Support
- use information in [[file:data/igs.c][igs.c]] and in the cgoban source.
- [[file:data/igs-session][tcpick output]] collected with while talking with IGS servers
  #+begin_src sh
    sudo tcpick -i wlan0 -yP
  #+end_src

* Asynchronous Process Interaction
Use process filters (see [[info:elisp#Filter%20Functions][info:elisp#Filter Functions]]) to act only on
whole completed commands.

