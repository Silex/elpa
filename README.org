[[https://melpa.org/#/vdiff][file:https://melpa.org/packages/vdiff-badge.svg]]

* vdiff

A tool like vimdiff for Emacs 

** Table of Contents                                                    :TOC:
 - [[#vdiff][vdiff]]
   - [[#introduction][Introduction]]
   - [[#recent-significant-changes][Recent (Significant) Changes]]
   - [[#screenshot][Screenshot]]
   - [[#installation-and-usage][Installation and Usage]]
   - [[#hydra][Hydra]]
   - [[#magit-integration][Magit integration]]
   - [[#further-customization][Further customization]]

** Introduction

vdiff is a diff tool for Emacs that is made to behave like vimdiff, meaning diff
information is displayed in buffers as you edit them. There are commands for
cycling through the hunks detected by =diff= and applying changes from one
buffer to the other. The main features are

  1. Synchronized scrolling of the buffers with lines matching between the two
  2. Commands to transmit (send/receive) hunks between buffers
  3. Automatic folding of lines that are unchanged in both buffers
  4. Commands to jump easily between hunks
  5. Everything done through overlays, meaning vdiff doesn't alter the actual
     text in the buffer (unless you are transmit changes of course)
  6. Unlike ediff, remain in buffers instead of having to use a third "control
     buffer"
  7. Cool hydra (see below)

vdiff has not been extensively tested yet, so please report any issues you
find. Contributions and suggestions are very welcome.

** Recent (Significant) Changes
   - [2017-02-01] Added magit integration functions in =vdiff-magit.el=. See [[#magit-integration][Magit integration]].
   - [2016-07-25] Added three-way diff support. See =vdiff-buffers3= and =vdiff-files3=.
   
** Screenshot

*** Basic two file diff with refined hunks
[[./img/leuven.png]]

*** Three file diff with targets for sending changes
[[./img/leuven3.png]]

** Installation and Usage
   
vdiff is available in MELPA, which is the recommended way to install it and keep
it up to date. To install it you may do =M-x package-install RET vdiff RET=.

To start a vdiff session, the main entry points are

| Command                | Description                                                       |
|------------------------+-------------------------------------------------------------------|
| =vdiff-buffers=        | Diff two open buffers                                             |
| =vdiff-files=          | Diff two files                                                    |
| =vdiff-buffers3=       | Diff three open buffers                                           |
| =vdiff-files3=         | Diff three files                                                  |
| =vdiff-current-file=   | Like =ediff-current-file= (Diff buffer with disk version of file) |
| =vdiff-merge-conflict= | Use vdiff to resolve merge conflicts in current file              |
   
After installing you can bind the commands to your preferred key prefix like this

#+BEGIN_SRC emacs-lisp
(require 'vdiff)
(define-key vdiff-mode-map (kbd "C-c") vdiff-mode-prefix-map)
#+END_SRC

which will bind most of the commands under the =C-c= prefix when vdiff-mode is
active. Of course you can pick whatever prefix you prefer. With the =C-c= prefix
the commands would be

*** Basics
    
| Key     | Command                 | Description                        |
|---------+-------------------------+------------------------------------|
| =C-c g= | =vdiff-switch-buffer=   | Switch buffers at matching line    |
| =C-c n= | =vdiff-next-hunk=       | Move to next hunk in buffer        |
| =C-c p= | =vdiff-previous-hunk=   | Move to previous hunk in buffer    |
| =C-c h= | =vdiff-hydra/body=      | Enter vdiff-hydra                  |

*** Viewing and Transmitting Changes Between Buffers

| Key     | Command                            | Description                         |
|---------+------------------------------------+-------------------------------------|
| =C-c r= | =vdiff-receive-changes=            | Receive change from other buffer    |
| =C-c s= | =vdiff-send-changes=               | Send this change(s) to other buffer |
| =C-c f= | =vdiff-refine-this-hunk=           | Highlight changed words in hunk     |
| =C-c x= | =vdiff-remove-refinements-in-hunk= | Remove refinement highlighting      |
| (none)  | =vdiff-refine-this-hunk-symbol=    | Refine based on symbols             |
| (none)  | =vdiff-refine-this-hunk-word=      | Refine based on words               |
| =C-c F= | =vdiff-refine-all-hunks=           | Highlight changed words             |
| (none)  | =vdiff-refine-all-hunks-symbol=    | Refine all based on symbols         |
| (none)  | =vdiff-refine-all-hunks-word=      | Refine all based on words           |

*** Folds

| Key     | Command                            | Description                         |
|---------+------------------------------------+-------------------------------------|
| =C-c N= | =vdiff-next-fold=                  | Move to next fold in buffer         |
| =C-c P= | =vdiff-previous-fold=              | Move to previous fold in buffer     |
| =C-c c= | =vdiff-close-fold=                 | Close fold at point or in region    |
| =C-c C= | =vdiff-close-all-folds=            | Close all folds in buffer           |
| =C-c t= | =vdiff-close-other-folds=          | Close all other folds in buffer     |
| =C-c o= | =vdiff-open-fold=                  | Open fold at point or in region     |
| =C-c O= | =vdiff-open-all-folds=             | Open all folds in buffer            |

*** Ignoring case and whitespace

| Key       | Command                   | Description             |
|-----------+---------------------------+-------------------------|
| =C-c i c= | =vdiff-toggle-case=       | Toggle ignoring of case |
| =C-c i w= | =vdiff-toggle-whitespace= | Toggle ignoring of case |

*** Saving, Updating and Exiting

| Key     | Command                 | Description                  |
|---------+-------------------------+------------------------------|
| =C-c w= | =vdiff-save-buffers=    | Save both buffers            |
| =C-c u= | =vdiff-refresh=         | Force diff refresh           |
| (none)  | =vdiff-restore-windows= | Restore window configuration |
| =C-c q= | =vdiff-quit=            | Quit vdiff                   |

Evil-mode users might prefer something like the following to use a comma as a
prefix in normal state.

#+BEGIN_SRC emacs-lisp
(require 'vdiff)
(require 'evil)
(evil-define-key 'normal vdiff-mode-map "," vdiff-mode-prefix-map)
#+END_SRC

To match vimdiff bindings some more work is required. The way the =d= command
for evil is set up makes it difficult to bind =do= and =dp= as they exist in
vimdiff. Here is a sample set of bindings that avoids this problem (thanks to
@edkolev for these).

#+BEGIN_SRC emacs-lisp
  (evil-define-minor-mode-key 'normal 'vdiff-mode "]c" 'vdiff-next-hunk)
  (evil-define-minor-mode-key 'normal 'vdiff-mode "[c" 'vdiff-previous-hunk)
  (evil-define-minor-mode-key 'normal 'vdiff-mode "zc" 'vdiff-close-fold)
  (evil-define-minor-mode-key 'normal 'vdiff-mode "zM" 'vdiff-close-all-folds)
  (evil-define-minor-mode-key 'normal 'vdiff-mode "zo" 'vdiff-open-fold)
  (evil-define-minor-mode-key 'normal 'vdiff-mode "zR" 'vdiff-open-all-folds)
  (evil-define-minor-mode-key 'motion 'vdiff-mode "go" 'vdiff-receive-changes)
  (evil-define-minor-mode-key 'motion 'vdiff-mode "gp" 'vdiff-send-changes)
#+END_SRC

** Hydra

Using the [[https://github.com/abo-abo/hydra][hydra package]], =vdiff-hydra= allows quick movement and changes to be
made in the buffer. By default it lives on the =h= command in the prefix
map. Bind =vdiff-hydra/body= directly to customize this key binding.

[[file:img/hydra.png]]

** Magit integration
   #+NAME: #magit-integration

Loading =vdiff-magit= will pull in functions that will allow vdiff to be used
with [[https://github.com/magit/magit][magit]]. In order to use these functions you need to call the vdiff functions
instead of the magit-ediff ones. Here is a very basic setup which replaces the
basic ediff key bindings in magit. 

Please note that this is a new feature and probably contains some bugs, so use
it with caution and please report oddities. 

#+BEGIN_SRC emacs-lisp
  (require 'vdiff-magit)
  (define-key magit-mode-map "e" 'vdiff-magit-dwim)
  (define-key magit-mode-map "E" 'vdiff-magit-popup)
  (setcdr (assoc ?e (plist-get magit-dispatch-popup :actions))
          '("vdiff dwim" 'vdiff-magit-dwim))
  (setcdr (assoc ?E (plist-get magit-dispatch-popup :actions))
          '("vdiff popup" 'vdiff-magit-popup))
  ;; This flag will default to using ediff for merges. vdiff-magit does not yet
  ;; support 3-way merges. Please see the docstring of this variable for more
  ;; information
  ;; (setq vdiff-magit-use-ediff-for-merges nil)
#+END_SRC

** Further customization
   
The current customization options and there defaults are
   
#+BEGIN_SRC emacs-lisp
  ;; Whether to lock scrolling by default when starting vdiff
  (setq vdiff-lock-scrolling t)

  ;; external diff program/command to use
  (setq vdiff-diff-program "diff")

  ;; Extra arguments to pass to diff. If this is set wrong, you may
  ;; break vdiff.
  (setq vdiff-diff-program-args "")

  ;; Unchanged lines to leave unfolded around a fold
  (setq vdiff-fold-padding 6)

  ;; Minimum number of lines to fold
  (setq vdiff-min-fold-size 4)

  ;; If non-nil, allow closing new folds around point after updates.
  (setq vdiff-may-close-fold-on-point t)

  ;; Function that returns the string printed for a closed fold. The arguments
  ;; passed are the number of lines folded, the text on the first line, and the
  ;; width of the buffer.
  (setq vdiff-fold-string-function 'vdiff-fold-string-default)

  ;; Default syntax table class code to use for identifying "words" in
  ;; `vdiff-refine-this-change'. Some useful options are
  ;; 
  ;; "w"   (default) words
  ;; "w_"  symbols (words plus symbol constituents)
  ;; 
  ;; For more information see
  ;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-Class-Table.html
  (setq vdiff-default-refinement-syntax-code "w")

  ;; If non-nil, automatically refine all hunks.
  (setq vdiff-auto-refine nil)

  ;; How to represent subtractions (i.e., deleted lines). The
  ;; default is full which means add the same number of (fake) lines
  ;; as those that were removed. The choice single means add only one
  ;; fake line. The choice fringe means don't add lines but do
  ;; indicate the subtraction location in the fringe.
  (setq vdiff-subtraction-style 'full)

  ;; Character to use for filling subtraction lines. See also
  ;; `vdiff-subtraction-style'.
  (setq vdiff-subtraction-fill-char ?-)
#+END_SRC

