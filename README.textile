_test-simple.el_ is intended to be:

* Simple -- no need for _contexts_, _specifications_, or __test tags__. But if you want, you still can add custom assert failure messages or add notes before a group of tests.
* Facilitate interactive use with @eval-last-sexp@, @eval-region@, and @eval-buffer@
* Allow running non-interactively batch use over a number of test files

I use this my "Debugger front end.":https://github.com/rocky/emacs-dbgr

Here is an example found in the "examples directory.":https://github.com/rocky/emacs-test-simple/tree/master/test

In file <code>gcd.el</code>:

<pre><code>
(defun gcd(a b)
  "Greatest Common Divisor of A and B"
  ;; Make a < b
  (if (> a b) 
      (let ((c a))
	(setq a b)
	(setq b c)))
  (cond 
   ((< a 0) nil)
   ((or (= 0 (- b a)) (= a 1)) a)
   (t (gcd (- b a) a))
   )
)
</code></pre>
     
In file <code>test-gcd.el</code> in the same directory:

<pre><code>
(require 'test-simple)
(test-simple-start) ;; Zero counters and start the stop watch.

;; Use (load-file) below because we want to always to read the source.
;; Also, we don't want no stinking compiled source.
(assert-t (load-file "./gcd.el") 
	  "Can't load gcd.el - are you in the right directory?" )

(note "degenerate cases")

(assert-nil (gcd 5 -1) "using positive numbers")
(assert-nil (gcd -4 1) "using positive numbers, switched order")
(assert-raises error (gcd "a" 32) 
	       "Passing a string value should raise an error")

(note "GCD computations")
(assert-equal 1 (gcd 3 5) "gcd(3,5)")
(assert-equal 8 (gcd 8 32) "gcd(8,32)")

(end-tests) ;; Stop the clock and print a summary
</code></pre>

Edit (with Emacs of course) <code>test-gcd.el</code> and run <code>M-x eval-current-buffer</code>

You should see in buffer <code>*test-simple*</code>:

<pre>
test-gcd.el
......
0 failures in 6 assertions (0.002646 seconds)
</pre>

Now let's try from a command line:

<pre>
$ emacs --batch --no-site-file --no-splash --load test-gcd.el
Loading /src/external-vcs/emacs-test-simple/example/gcd.el (source)...
*scratch*
......
0 failures in 6 assertions (0.000723 seconds)
</pre>
